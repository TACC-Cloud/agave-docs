### Supported Authorization Flows

The Tapis REST APIs currently supports four authorization flows:

1. The <a href="#authorization-code">Authorization Code</a> flow first gets a code then exchanges it for an access token and a refresh token. Since the exchange uses your client secret key, you should make that request server-side to keep the integrity of the key. An advantage of this flow is that you can use refresh tokens to extend the validity of the access token.
2. The <a href="#implicit-grant">Implicit Grant</a> flow is carried out client-side and does not involve secret keys. The access tokens that are issued are short-lived and there are no refresh tokens to extend them when they expire.
3. <a href="#resource-owner-password-credentials">Resource Owner Password Credentials</a> flow is suitable for native and mobile applications as well as web services, this flow allows client applications to obtain an access token for a user by directly providing the user credentials in an authentication request. This flow exposes the user's credentials to the client application and is primarily used in situations where the client application is highly trusted such as the command line.
4. The <a href="#client-credentials">Client Credentials</a> flow enables users to interact with their own protected resources directly without requiring browser interaction. This is a critical addition for use at the command line, in scripts, and in offline programs. This flow assumes the person registering the client application and the user on whose behalf requests are made be the same person.

<%= partial "includes/tables/6" %>

<aside class="notice"><b>Additional Help:</b> You can read our <a href="/tools/web-application-tutorial" title="Tapis Web Application Tutorial">step-by-step tutorial</a> where we explain how to run an example application using these flows. In addition, we have a list of <a href="/tools/" title="Tools">handy wrappers and tools</a> for your language of choice.</aside>

### Token lifetimes

There are two kinds of tokens you will obtained: access and refresh. Access token lifetimes are configured by the organization operating each tenant and vary based on the flow used to obtain them. By default, access tokens are valid for 4 hours.

<%= partial "includes/tables/token-lifetimes" %>

### Authorization Code

The method is suitable for long-running applications in which the user logs in once and the access token can be refreshed. Since the token exchange involves sending your secret key, this should happen on a secure location, like a backend service, not from a client like a browser or mobile apps. This flow is described in <a href="http://tools.ietf.org/html/rfc6749#section-4.4" title="RFC-6749">RFC-6749</a>. This flow is also the authorization flow used in our REST API Tutorial.

<p>
    <img src="/images/2014/09/Authorization-Code-Flow.png" alt="Authorization Code Flow Diagram" style="height: auto;"/>
</p>

#### 1. Your application requests authorization

> A typical request will look something like this

```http
https://public.tenants.agaveapi.co/authorize/?client_id=gTgp...SV8a&response_type=code&redirect_uri=https%3A%2F%2Fexample.com%2Fcallback&scope=PRODUCTION&state=866
```

The authorization process starts with your application sending a request to the Tapis authorization service. (The reason your application sends this request can vary: it may be a step in the initialization of your application or in response to some user action, like a button click.) The request is sent to the /authorize endpoint of the Authorization service:

The request will include parameters in the query string:

<%= partial "includes/tables/17" %>

#### 2. The user is asked to authorize access within the scopes

The Tapis Authorization service presents details of the scopes for which access is being sought. If the user is not logged in, they are prompted to do so using their API username and password.

When the user is logged in, they are asked to authorize access to the actions and services defined in the scopes.

#### 3. The user is redirected back to your specified URI

> Let's assume you provided the following callback URL.

```http
https://example.com/callback
```

After the user accepts (or denies) your request, the Tapis Authorization service redirects back to the redirect_uri. If the user has accepted your request, the response query string contains a `code` parameter with the access code you will use in the next step to retrieve an access token.

> Sample success redirect back from the server

```http
https://example.com/callback?code=Pq3S..M4sY&state=866
```

<%= partial "includes/tables/18" %>

If the user has denied access, there will be no access token and the final URL will have a query string containing the following parameters:

```nothing
# Sample denial redirect back from the server
https://example.com/callback?error=access_denied&state=867
```

<%= partial "includes/tables/19" %>


#### 4. Your application requests refresh and access tokens

```bash
POST https://public.tenants.agaveapi.co/token
```

When the authorization code has been received, you will need to exchange it with an access token by making a POST request to the Tapis Authorization service, this time to its `/token` endpoint. The body of this POST request must contain the following parameters:

<%= partial "includes/tables/9" %>

#### 5. The tokens are returned to your application

```json
# An example cURL request
curl -X POST -d "grant_type= authorization_code"
    -d "code=Pq3S..M4sY"
    -d "client_id=gTgp...SV8a"
    -d "client_secret=hZ_z3f...BOD6"
    -d "redirect_uri=https%3A%2F%2Fwww.foo.com%2Fauth"
    https://public.tenants.agaveapi.co/token
```

> The response would look something like this:

```json
{
    "access_token": "a742...12d2",
    "expires_in": 14400,
    "refresh_token": "d77c...Sacf",
    "token_type": "bearer"
}
```

On success, the response from the Tapis Authorization service has the status code 200 OK in the response header, and a JSON object with the fields in the following table in the response body:

<%= partial "includes/tables/10" %>


#### 6. Use the access token to access the Tapis REST APIs

> Make a call to the API

```bash
curl -H "Authorization: Bearer a742...12d2"
    https://public.tenants.agaveapi.co/profiles/v2/me?pretty=true&naked=true
```

> The response would look something like this:

```json
{
    "create_time": "20140905072223Z",
    "email": "rjohnson@mlb.com",
    "first_name": "Randy",
    "full_name": "Randy Johnson",
    "last_name": "Johnson",
    "mobile_phone": "(123) 456-7890",
    "phone": "(123) 456-7890",
    "status": "Active",
    "uid": 0,
    "username": "rjohnson"
}
```

Once you have a valid access token, you can include it in `Authorization` header for all subsequent requests to APIs in the Platform.

#### 7. Requesting access token from refresh token

```bash
curl -sku "Authorization: Basic Qt3c...Rm1y="
    -d grant_type=refresh_token
    -d refresh_token=d77c...Sacf
    https://public.tenants.agaveapi.co/token
```

> The response would look something like this.

```json
{
    "access_token": "61e6...Mc96",
    "expires_in": 14400,
    "token_type": "bearer"
}
```

Access tokens are deliberately set to expire after a short time, usually 4 hours, after which new tokens may be granted by supplying the refresh token originally obtained during the authorization code exchange.

The request is sent to the token endpoint of the Tapis Authorization service:

```
POST https://public.tenants.agaveapi.co/token
```

The body of this POST request must contain the following parameters:

<%= partial "includes/tables/11" %>

The header of this POST request must contain the following parameter:

<%= partial "includes/tables/12" %>


### Implicit Grant

Implicit grant flow is for clients that are implemented entirely using JavaScript and running in resource owner's browser. You do not need any server side code to use it. This flow is described in <a href="http://tools.ietf.org/html/rfc6749#section-4.4" title="RFC-6749">RFC-6749</a>.

<img src="/images/2014/09/Implicit-Flow.png" alt="Implicit Flow" style="width: 100%; height:auto"/>

#### 1. Your application requests authorization

```json
https://public.tenants.agaveapi.co/authorize?client_id=gTgp...SV8a&redirect_uri=http:%2F%2Fexample.com%2Fcallback&scope=PRODUCTION&response_type=token&state=867
```

The flow starts off with your application redirecting the user to the `/authorize` endpoint of the Authorization service. The request will include parameters in the query string:

<%= partial "includes/tables/16" %>


#### 2. The user is asked to authorize access within the scopes

The Tapis Authorization service presents details of the scopes for which access is being sought. If the user is not logged in, they are prompted to do so using their API username and password.

When the user is logged in, they are asked to authorize access to the services defined in the scopes. By default all of the Core Science APIs fall under a single scope called, `PRODUCTION`.

#### 3. The user is redirected back to your specified URI

> Let's assume we specified the following callback address.

```http
https://example.com/callback
```

> A valid success response would be

```http
https://example.com/callback#access_token=Vr17...amUa&token_type=bearer&expires_in=3600&state=867
```

After the user grants (or denies) access, the Tapis Authorization service redirects the user to the `redirect_uri`. If the user has granted access, the final URL will contain the following data parameters in the query string.

<aside class="alert">Notice the token information is appended the the callback url as a URL <em>fragment</em>, not query parameters. This is important if you are manually parsing the callback response because the <span class="code">access_token</span> will not be available as a query parameter. You will need to either parse the fragment from the URL yourself, or use an URL library in your development language to handle it for you.</span>

<%= partial "includes/tables/18" %>

If the user has denied access, there will be no access token and the final URL will have a query string containing the following parameters:

> A failed response would resemble something like

```bash
https://example.com/callback?error=access_denied&state=867
```
<%= partial "includes/tables/19" %>

#### 4. Use the access token to access the Tapis REST APIs

```bash
curl -H "Authorization: Bearer 61e6...Mc96" https://public.tenants.agaveapi.co/profiles/v2/me?pretty=true
```

> The response would look something like this:

```json
{
    "create_time": "20140905072223Z",
    "email": "nryan@mlb.com",
    "first_name": "Nolan",
    "full_name": "Nolan Ryan",
    "last_name": "Ryan",
    "mobile_phone": "(123) 456-7890",
    "phone": "(123) 456-7890",
    "status": "Active",
    "uid": 0,
    "username": "nryan"
}
```

The access token allows you to make requests to any of the Tapis REST APIs on behalf of the authenticated user.


### Resource Owner Password Credentials

The method is suitable for scenarios where there is a high degree of trust between the end-user and the client application. This could be a Desktop application, shell script, or server-to-server communication where user authorization is needed. This flow is described in <a href="http://tools.ietf.org/html/rfc6749#section-4.4" title="RFC-6749">RFC-6749</a>.

<img src="/images/2014/09/Resource-Owner-Password-Flow.png" style="width:100%; height:auto;">

#### 1. Your application requests authorization
```bash
curl -sku "Authorization: Basic Qt3c...Rm1y="
    -d grant_type=password
    -d username=rjohnson
    -d password=password
    -d scope=PRODUCTION
    https://public.tenants.agaveapi.co/token
```

> The response would look something like this:

```json
{
    "access_token": "3Dsr...pv21",
    "expires_in": 14400,
    "refresh_token": "dyVa...MqR0",
    "token_type": "bearer"
}
```

The request is sent to the `/token` endpoint of the Tapis Authentication service. The request will include the following parameters in the request body:

<%= partial "includes/tables/14" %>

The header of this POST request must contain the following parameter:

<%= partial "includes/tables/12" %>

<aside class="notice">It is not necessary for the username and password sent in the authorization request correspond to those of the client credentials owner, you can obtain an access token for any user provided you have their username and password. It is important to note that this flow should ***only*** be used in situations of high trust where no browser is available to handle the HTTP redirects required by the Authorization Code flow. Collecting and/or unnecessarily exposing user passwords is a violation of the <a href="/terms-of-service/" title="Terms of Service">Terms of Service</a> and subject to immediate account revocation.</aside>

```bash
https://example.com/callback?error=access_denied
```

If the user has not accepted your request or an error has occurred, the response query string contains an error parameter indicating the error that occurred during login. For example:

#### 2. Use the access token to access the Tapis REST APIs

```bash
curl -H "Authorization: Bearer 3Dsr...pv21"
    https://public.tenants.agaveapi.co/profiles/v2/me?pretty=true
```

> The response would look something like this:

```json
{
    "create_time": "20140905072223Z",
    "email": "rjohnson@mlb.com",
    "first_name": "Randy",
    "full_name": "Randy Johnson",
    "last_name": "Johnson",
    "mobile_phone": "(123) 456-7890",
    "phone": "(123) 456-7890",
    "status": "Active",
    "uid": 0,
    "username": "rjohnson"
}
```

The access token allows you to make requests to any of the Tapis REST APIs on behalf of the authenticated user.

#### 3. Requesting access token from refresh token
```bash
curl -sku "Authorization: Basic Qt3c...Rm1y="
    -d grant_type=refresh_token
    -d refresh_token=dyVa...MqR0
    -d scope=PRODUCTION
    https://public.tenants.agaveapi.co/token
```

> The response would look something like this:

```json
{
    "access_token": "8erF...NGly",
    "expires_in": 14400,
    "token_type": "bearer"
}
```

Access tokens are deliberately set to expire after a short time, usually 4 hours, after which new tokens may be granted by supplying the refresh token obtained during original request.

The request is sent to the token endpoint of the Tapis Authorization service. The body of this POST request must contain the following parameters:

<%= partial "includes/tables/15" %>

The header of this POST request must contain the following parameter:

<%= partial "includes/tables/12" %>

### Client Credentials

The method is suitable for authenticating your requests to the Tapis REST API. This flow is described in <a href="http://tools.ietf.org/html/rfc6749#section-4.4" title="RFC-6749">RFC-6749</a>.

<img src="/images/2014/09/Client-Credentials-Flow.png" style="width:100%; height:auto;">

#### 1. Your application requests authorization

```bash
curl -sku "Authorization: Basic Qt3c...Rm1y="
    -d grant_type=client_credentials
    -d scope=PRODUCTION
    https://public.tenants.agaveapi.co/token
```

> The response would look something like this:

```json
{
    "access_token": "61e6...Mc96",
    "expires_in": 14400,
    "token_type": "bearer"
}
```

The request is sent to the `/token` endpoint of the Tapis Authentication service. The request must include the following parameters in the request body:

<%= partial "includes/tables/13" %>

The header of this POST request must contain the following parameter:

<%= partial "includes/tables/12" %>


#### 2. Use the access token to access the Tapis REST APIs

```bash
curl -H "Authorization: Bearer 61e6...Mc96"
     https://public.tenants.agaveapi.co/profiles/v2/me
```

> The response would look something like this:

```json
{
    "email": "nryan@mlb.com",
    "firstName" : "Nolan",
    "lastName" : "Ryan",
    "position" : "null",
    "institution" : "Houston Astros",
    "phone": "(123) 456-7890",
    "fax" : null,
    "researchArea" : null,
    "department" : null,
    "city" : "Houston",
    "state" : "TX",
    "country" : "USA",
    "gender" : "M",
    "_links" : {
      "self" : {
        "href" : "https://public.tenants.agaveapi.co/profiles/v2/nryan"
      },
      "users" : {
        "href" : "https://public.tenants.agaveapi.co/profiles/v2/nryan/users"
      }
    }
}
```

The access token allows you to make requests to any of the Tapis REST APIs on behalf of the authenticated user.
